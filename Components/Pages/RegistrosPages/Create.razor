@page "/Prestamo/Create"
@using EddyCapellan_Ap1_P1.DAL
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject PrestamoService prestamoService
@inject NavigationManager navigationManager
@inject Contexto _contexto

<PageTitle>Registrar Prestamo</PageTitle>

<EditForm Model="prestamo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card-header text-center">
        <h3 class="card-header fw-bold">Registrar prestamo</h3>
    </div>

    <div class="card-body">

        @*PrestamoId*@
        <div class="mb-3">
            <label for="prestamId" class="form-label">PrestamoId:</label>
            <InputNumber @bind-Value="prestamo.PrestamoId" readonly />
        </div>

        @*Deudor*@
        <div class="mb-3">
            <label>Deudor:</label>
            <select @bind="prestamo.DeudorId" class="form-control">
                <option value="0">Seleccione un deudor</option>
                @foreach (var deudor in deudores)
                {
                    <option value="@deudor.DeudorId">@deudor.Nombres</option>
                }
            </select>
            <ValidationMessage For="@(() => prestamo.DeudorId)" />
        </div>

        @*Concepto*@
        <div class="mb-3">
            <label for="Concepto" class="form-label">Concepto:</label>
            <InputText @bind-Value="prestamo.Concepto" class="form-control" />
            <ValidationMessage For="@(() => prestamo.Concepto)" />
        </div>

        @*Monto*@
        <div class="mb-3">
            <label for="Concepto" class="form-label">Monto:</label>
            <InputNumber @bind-Value="prestamo.Monto" class="form-control" />
            <ValidationMessage For="@(() => prestamo.Monto)" />
        </div>

        @*Balance*@
        <div class="mb-3">
            <label for="Balance" class="form-label">Balance:</label>
            <InputNumber @bind-Value="prestamo.Balance" class="form-control" />
            <ValidationMessage For="@(() => prestamo.Balance)" />
        </div>
    </div>

    <div class="card-footer text-center">
        <div class="btn-group">
            <button type="submit" class="btn btn-primary"  <span class="bi bi-floppy mt-3"></span>Guardar</button>
            <a href="/Prestamo/Index" class="btn btn-primary" type="button" style="margin-left: 10px;">
                <span class="bi bi-arrow-left mt-3"></span> Volver
            </a>
        </div>
    </div>

    @if (Validacion)
    {
        <div class="alert alert-success text-center" role="alert">
            El Prestamo se a guardado con exito.
            Dele al boton volver para retornar a la consulta.
        </div>
    }

</EditForm>

@code {
    [Parameter]
    public int PrestamoId { get; set; }
    public Prestamos? prestamo { get; set; } = new Prestamos();
    public List<Deudores> deudores { get; set; } = new List<Deudores>();
    private bool Validacion;
    private bool existe = false;

    protected override async Task OnInitializedAsync()
    {
        deudores = await _contexto.Deudores.ToListAsync();
    }

    public async Task Nuevo()
    {
        prestamo = new Prestamos();
        existe = false;
    }
    public async Task Buscar()
    {
        existe = false;
        var encontrado = await prestamoService.Buscar(prestamo.PrestamoId);
        if (encontrado != null)
        {
            prestamo = encontrado;
        }
        else
        {
            Nuevo();
        }
    }
    public async Task<bool> Validar()
    {
        existe = await prestamoService.Existe(prestamo.PrestamoId);
        return !existe;
    }
    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }
        var guardado = await prestamoService.Guardar(prestamo);
        if (guardado)
        {
            Nuevo();
            Validacion = true;
        }
        else
        {
            Validacion = false;
        }
    }
}