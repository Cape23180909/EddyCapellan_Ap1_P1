@page "/Cobro/Create"
@inject CobroService cobroService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <PageTitle>Registrar cobro</PageTitle>

    <div class="container mt-4">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3 class="mb-0 fw-bold">Registrar Cobro</h3>
            </div>

            <div class="card-body">
                @* Cobro Id *@
                <div class="mb-3">
                    <label for="CobroId" class="col-form-label"><strong>Cobro Id:</strong></label>
                    <div class="input-group">
                        <InputNumber @bind-Value="cobro.CobroId" class="form-control" />
                        <button class="btn btn-outline-primary" type="button">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                </div>

                @* Fecha *@
                <div class="mb-3">
                    <label for="Fecha" class="col-form-label"><strong>Fecha:</strong></label>
                    <InputDate @bind-Value="cobro.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => cobro.Fecha)" />
                </div>

                @* Deudor *@
                <div class="mb-3">
                    <label for="Deudor" class="col-form-label"><strong>Deudor:</strong></label>
                    <select @onchange="OnDeudorSelected" class="form-select">
                        <option value="0">Seleccione un deudor</option>
                        @foreach (var deudor in listadeudor)
                        {
                            <option value="@deudor.DeudorId">@deudor.Nombres</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => cobro.DeudorId)" />
                </div>

                @* Monto *@
                <div class="mb-3">
                    <label for="Monto" class="col-form-label"><strong>Monto:</strong></label>
                    <InputNumber @bind-Value="cobro.Monto" class="form-control" />
                    <ValidationMessage For="@(() => cobro.Monto)" />
                </div>
            </div>

            @* Detalles del Cobro *@
            <div class="card mt-4 border-success">
                <div class="card-header">
                    <h3 class="mb-0 fw-bold">Cobro Detalle</h3>
                </div>

                <div class="card-body p-0">
                    <div class="row align-items-center m-0">
                        @* Selección de préstamo *@
                        <div class="col-sm-6 p-0 text-center">
                            <select @bind="selectedPrestamoId" class="form-select">
                                <option value="">Seleccione un préstamo</option>
                                @if (prestamosDisponibles != null && prestamosDisponibles.Any())
                                {
                                    @foreach (var prestamo in prestamosDisponibles)
                                    {
                                        <option value="@prestamo.PrestamoId">@prestamo.PrestamoId - @prestamo.Concepto - Monto: @prestamo.Monto</option>
                                    }
                                }
                            </select>
                            <ValidationMessage For="@(() => selectedPrestamoId)" />
                        </div>

                        @* Campo de Valor Cobrado *@
                        <div class="col-sm-4 p-0">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Valor Cobrado:</span>
                                </div>
                                <InputNumber @bind-Value="cobrodetalle.ValorCobrado" class="form-control" />
                            </div>
                            <ValidationMessage For="@(() => cobrodetalle.ValorCobrado)" />
                        </div>

                        @* Botón para agregar detalle *@
                        <div class="col-sm-2 p-0">
                            <button type="button" class="btn btn-primary" @onclick="AgregarDetalle">
                                <span class="bi bi-plus"></span> Agregar
                            </button>
                        </div>
                    </div>
                </div>

                @* Tabla de Detalles *@
                <div class="table-responsive mt-3">
                    <table class="table table-bordered text-center">
                        <thead>
                            <tr>
                                <th>Préstamo</th>
                                <th>Valor Cobrado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in listacobrodetalle)
                            {
                                <tr>
                                    <td>@detalle.PrestamoId</td>
                                    <td>@detalle.ValorCobrado</td>
                                    <td>
                                        <button type="button" class="btn btn-outline-dark" @onclick="() => EliminarDetalle(detalle)">
                                            <span class="bi bi-trash"></span> Remover
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            @* Footer *@
            <div class="card-footer text-center">
                <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">
                    <span class="bi bi-plus"></span> Nuevo
                </button>
                <button type="submit" class="btn btn-outline-success">
                    <span class="bi bi-floppy"></span> Guardar
                </button>
                <a href="/Cobro/Index" class="btn btn-outline-primary">
                    <span class="bi bi-arrow-left mt-3"></span> Volver
                </a>

                @if (guardo)
                {
                    <div class="alert alert-success mt-2" role="alert">
                        El cobro se ha guardado con éxito. Dele al botón volver para retornar a la consulta.
                    </div>
                }

                @if (guardo)
                {
                    <div class="alert alert-danger mt-2" role="alert">
                        Debe seleccionar un préstamo y llenar el valor cobrado.
                    </div>
                }
            </div>
        </div>
    </div>
</EditForm>

@code {
        [Parameter]
        public int CobroId { get; set; }
    public Cobros? cobro { get; set; } = new Cobros();
    public CobrosDetalle? cobrodetalle { get; set; } = new CobrosDetalle();
    public Prestamos? prestamo { get; set; } = new Prestamos();
    private int selectedDeudorId { get; set; }
    private List<Prestamos> prestamosDisponibles = new List<Prestamos>();
    private int selectedPrestamoId { get; set; }
    public List<CobrosDetalle> listacobrodetalle { get; set; } = new List<CobrosDetalle>();
    public List<Deudores> listadeudor { get; set; } = new List<Deudores>();
    private bool existe = false;
    private bool guardo;
    private bool validacion;

    protected override async Task OnInitializedAsync()
    {
        listadeudor = await cobroService.ObtenerDeudoresConPrestamos();
    }

    private async Task OnDeudorSelected(ChangeEventArgs e)
    {
        int selectedDeudorId = Convert.ToInt32(e.Value);
        cobro.DeudorId = selectedDeudorId;

        if (selectedDeudorId > 0)
        {
            prestamosDisponibles = await cobroService.CargarPrestamosPorDeudorAsync(selectedDeudorId);

            if (prestamosDisponibles != null && prestamosDisponibles.Any())
            {
                cobro.Monto = prestamosDisponibles.FirstOrDefault()?.Monto ?? 0;
            }
        }
    }

    public async Task Nuevo()
    {
        existe = false;
        cobrodetalle = new CobrosDetalle();
        cobro = new Cobros();
    }
    public async Task Buscar()
    {
        existe = false;
        var encontrado = await cobroService.Buscar(cobro.CobroId);
        if (encontrado != null)
        {
            cobro = encontrado;
        }
        else
        {
            Nuevo();
        }
    }
    public async Task<bool> Validar()
    {
        existe = await cobroService.Existe(cobro.CobroId);
        return !existe;
    }
    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }
        cobro.CobroDetalles = listacobrodetalle;
        var guardado = await cobroService.Guardar(cobro);
        if (guardado)
        {
            guardo = true;
        }
    }

    public async Task EliminarDetalle(CobrosDetalle detalle)
    {
        listacobrodetalle.Remove(detalle);
    }

    public void AgregarDetalle()
    {
        validacion = false;

        if (selectedPrestamoId <= 0)
        {
            validacion = true;
            return;
        }

        if (cobrodetalle.ValorCobrado <= 0)
        {
            validacion = true;
            return;
        }

        if (listacobrodetalle.Any(d => d.PrestamoId == selectedPrestamoId))
        {
            validacion = true;
            return;
        }

        CobrosDetalle nuevoDetalle = new CobrosDetalle
            {
                PrestamoId = selectedPrestamoId,
                ValorCobrado = cobrodetalle.ValorCobrado
            };

        listacobrodetalle.Add(nuevoDetalle);


        cobrodetalle = new CobrosDetalle();
        selectedPrestamoId = 0;
    }


    public async Task Volver()
    {
        navigationManager.NavigateTo("/Cobro/Index");
    }

}